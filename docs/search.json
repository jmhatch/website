[
  {
    "objectID": "projects/index.html",
    "href": "projects/index.html",
    "title": "Projects",
    "section": "",
    "text": "boemWind \n            \n            \n                Northeast Fisheries Science Center\n                | Population and Ecosystems Monitoring and Analysis Division\n                | Offshore Wind and Ecology Branch\n                | R package\n            \n            A repository of BOEM Wind Energy Areas (WEAs) in simple features, sf, format stored in an *.rda file for use with R.\n        \n    \n    \n        \n            \n        \n        \n            \n                PAMvieweR \n            \n            \n                Northeast Fisheries Science Center\n                | Protected Species Division\n                | Passive Acoustics Branch\n                | R package\n            \n            Facilitating exploratory data analysis (EDA) for passive acoustic data stored in the iternal NEFSC database (db), Makara.\n        \n    \n    \n        \n            \n        \n        \n            \n                NEFSCspatial \n            \n            \n                Northeast Fisheries Science Center\n                | R package\n            \n            A repository of spatial data (vectors) in simple features, sf, format.\n        \n    \n\n\nNo matching items"
  },
  {
    "objectID": "projects/index.html#fy-202324",
    "href": "projects/index.html#fy-202324",
    "title": "Projects",
    "section": "",
    "text": "boemWind \n            \n            \n                Northeast Fisheries Science Center\n                | Population and Ecosystems Monitoring and Analysis Division\n                | Offshore Wind and Ecology Branch\n                | R package\n            \n            A repository of BOEM Wind Energy Areas (WEAs) in simple features, sf, format stored in an *.rda file for use with R.\n        \n    \n    \n        \n            \n        \n        \n            \n                PAMvieweR \n            \n            \n                Northeast Fisheries Science Center\n                | Protected Species Division\n                | Passive Acoustics Branch\n                | R package\n            \n            Facilitating exploratory data analysis (EDA) for passive acoustic data stored in the iternal NEFSC database (db), Makara.\n        \n    \n    \n        \n            \n        \n        \n            \n                NEFSCspatial \n            \n            \n                Northeast Fisheries Science Center\n                | R package\n            \n            A repository of spatial data (vectors) in simple features, sf, format.\n        \n    \n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hi, I'm Josh.",
    "section": "",
    "text": "Hi, I'm Josh.\n            I'm a Marine Resource Management Specialist with NOAA Fisheries  \n            @NEFSC. I work at the intersection of protected species and offshore wind.\n            Learn more about how offshore wind can affect endangered or threatened species!\n            Click here"
  },
  {
    "objectID": "blog/2024/12/16/audiomoth/index.html",
    "href": "blog/2024/12/16/audiomoth/index.html",
    "title": "Audio Birding",
    "section": "",
    "text": "North American bird populations have declined by about 29% since 1970 (Rosenberg et al. 2019), a staggering statistic. The drivers behind this decline are likely related to habitat loss and environmental stress that could include effects from artificial light, noise, air pollution, and disturbance. But being able to estimate trends in bird populations requires long-term monitoring programs, and opportunistic citizen science data are gaining traction in their utility to supplement such monitoring.\nWith the increase in low-cost monitoring tools, like the AudioMoth, it has never been easier for citizen science to make an impact on long-term scientific research. The AudioMoth is an acoustic recording device that allows the everyday Joe Shmoe to acoustically monitor wildlife in their own backyard. The AudioMoth is small, similar in size to a credit card, with a built-in microphone, SD storage card, and microprocessor. All of that is to say that the AudioMoth can be programmed to record during certain times of the day, like the morning chorus, for an extended period.\n\n\n\nAudioMoth diagram from Hill et al. (2019).\n\n\nI programmed my AudioMoth to record for 3 hours every morning (5:30 am - 8:30 am) starting on May 12 and ending on June 15. My goal was to understand what birds where using or moving through my backyard during spring migration. I finally got around to processing each recording using BirdNet-Analyzer to detect bird calls or songs from the audio. Below is a graph showing relative frequency of detected bird occurrence in my backyard over the course of a month (give or take). So cool!\n\n\n\nd3 = require(\"d3@7\")\nformat = d3.format(\".01%\")\n\n// load csv\nbird_freq = await FileAttachment(\"data/may_june_chorus_2024.csv\").csv({typed: true});\nbird_freq_filt = bird_freq.filter((d) =&gt; d.freq &gt; 0.001)\n\n// d3 plot\nPlot.plot({\n  marginLeft: 139,\n  x: {axis: \"top\", percent: true, label: \"Frequency\"},\n  y: {label: null},\n  marks: [\n    Plot.barX(bird_freq_filt, {x: \"freq\", y: \"common_name\", fill: \"#00467F\", sort: {y: \"x\", reverse: true}}), \n    Plot.text(bird_freq_filt, {x: \"freq\", y: \"common_name\", text: d =&gt; format(d.freq), textAnchor: \"start\", dx: 3, filter: d =&gt; d.freq &lt;= 0.02, fill: \"currentColor\"}), \n    Plot.text(bird_freq_filt, {x: \"freq\", y: \"common_name\", text: d =&gt; format(d.freq), textAnchor: \"end\", dx: -3, filter: d =&gt; d.freq &gt; 0.02, fill: \"white\" }),\n    Plot.ruleX([0])\n  ]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNext step is to peform a a little QA/QC on the detections. I have heard or seen every species that BirdNet detected in my backyard, except for Scarlet Tanagers (that can sound like American Robins) and Black-throated Green Warblers (BTNWs). I spot checked a few of the recordings where BirdNet detected BTNWs, and I did hear that characteristic “zee-zee-zee-zooo-zeet” song. So I’m fairly confident the AudioMoth picked up and BirdNet detected some BTNWs that were passing by :)"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Blog",
    "section": "",
    "text": "Dec 16\n        \n        \n            Audio Birding\n            \n                \n                    audiomoth\n                \n            \n            Using an audiomoth to remotely record the morning chorus\n        \n        \n            \n\n    \n\n\nNo matching items"
  },
  {
    "objectID": "blog/index.html#section",
    "href": "blog/index.html#section",
    "title": "Blog",
    "section": "",
    "text": "Dec 16\n        \n        \n            Audio Birding\n            \n                \n                    audiomoth\n                \n            \n            Using an audiomoth to remotely record the morning chorus\n        \n        \n            \n\n    \n\n\nNo matching items"
  },
  {
    "objectID": "map/index.html",
    "href": "map/index.html",
    "title": "Birding on Public Lands",
    "section": "",
    "text": "I am an avid birder and some of my favorite places to bird include local, state, and federal public lands. Why public lands? Because they are (usually) open to the public, and provide unique opportunities to see some amazing wildlife (including birds)! Below you can select and view some of the public lands I’ve visited. You can even see the most recent bird sightings (last 2 weeks for up to 10 selected public lands), but you’ll need to enter your eBird API key and hit the Run button. If you don’t have an eBird API key, then visit this page.\n\nL = {\n  const L = await require(\"leaflet/dist/leaflet.js\");\n  if (!L._style) {\n    const href = await require.resolve(\"leaflet/dist/leaflet.css\");\n    document.head.appendChild(L._style = html`&lt;link href=${href} rel=stylesheet&gt;`);\n  }\n  L.esri = await require(\"esri-leaflet/dist/esri-leaflet.js\");\n  // L.esri.Heat = await r(\"esri-leaflet-heatmap\");\n  // await r(\"leaflet.heat\").catch(() =&gt; L.heatLayer);\n  return L;\n};\n\n\n\n\n\n\n\nfed_public_lands = await FileAttachment(\"data/protected_lands_visited.geojson\").json();\n\n// load json\neBird_hotspots = await FileAttachment(\"data/protected_lands_eBird.json\").json();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nland_names = {\n\n  let a = fed_public_lands.features.map(x =&gt; x.properties.Unit_Nm);\n  \n  // get unique values\n  return [... new Set(a)];\n\n};\n\n\n\n\n\n\n\ncall_eBird = function() {\n\n  let txt = \"\";  \n  let url = \"https://api.ebird.org/v2/data/obs/US/recent?back=14&hotspot=true&r=\";\n\n  if (results.length &gt; 0) { \n  \n    // txt = txt + url + results.map(e =&gt; eBird_hotspots.hotspot_id[eBird_hotspots.fed_land.indexOf(e)])\n    txt = txt + url + results.map(e =&gt; eBird_hotspots[e]) \n\n    return fetch(txt, {\n      headers: {\n        'x-ebirdapitoken': eBird_api_key,\n      }\n    })\n    .then(res =&gt; {\n      let bird_sightings = res.json();\n      // console.log(bird_sightings);\n      return bird_sightings;\n    });\n    \n  };\n  \n\n};\n\n\n\n\n\n\n\n\n\nviewof lands = Inputs.select(land_names, { label: \"Public Lands:\" });\n\n\n\n\n\n\n\n\nviewof updateLand = Inputs.button([[\"Add\", value =&gt; [\"add\", lands]], [\"Remove\", value =&gt; [\"remove\", lands]]], {required: true});\n\n\n\n\n\n\n\n\n\n\n\nbuildResultsContainer = {\n\n  d3.select(\".results-container\")\n    .append(\"div\")\n    .attr(\"class\", \"results\")\n    .append(\"p\");\n  \n  d3.select(\".results-container\")\n    .insert(\"label\", \".results\")\n    .text(\"Public Land(s) (selected):\");\n\n};\n\n\n\n\n\n\n\nviewof eBird_api_key = Inputs.password({label: \"eBird API Key:\", value: \"\"})\n\n\n\n\n\n\n\n\nviewof runAPI = Inputs.button(\"Run\", {reduce: call_eBird, value: null});\n\n\n\n\n\n\n\n\n\n\n\nbuildeBirdContainer = {\n\n  d3.select(\".eBird-container\")\n    .append(\"div\")\n    .attr(\"class\", \"eBird\")\n    .append(\"p\");\n  \n  d3.select(\".eBird-container\")\n    .insert(\"label\", \".eBird\")\n    .text(\"Recent bird(s):\");\n\n};\n\n\n\n\n\n\n\n\n\n\n\ncontainer = {\n\n  let x = d3.create(\"div\")\n  \n  // x.attr(\"style\", `width:100%;height:${window.outerHeight * 0.65}px`);\n  x.attr(\"style\", `width:100%; min-height:750px`);\n\n  return x.node();\n}\n\n\n\n\n\n\n\npublic_lands = {\n  \n  // let map = L.map(container, {minZoom: 0, maxZoom: 16}); // define zoom level globally, but decided to do this on a layer by layer basis\n  // https://developers.arcgis.com/documentation/mapping-apis-and-services/reference/zoom-levels-and-scale/#conversion-tool\n  // LOD is the zoom level, if not specified use the conversion tool to translate min / max scale to zoom level\n  \n  let map = L.map(container);\n  \n  // add basemap layers\n  const usgs = \"&lt;a href='https://www.usgs.gov/'&gt;U.S. Geological Survey&lt;/a&gt; | &lt;a href='https://www.usgs.gov/laws/policies_notices.html'&gt;Policies&lt;/a&gt;\";\n\n  const MassGIS_Basemap = L.esri.tiledMapLayer({\n    url: 'https://tiles.arcgis.com/tiles/hGdibHYSPO59RG1h/arcgis/rest/services/MassGISBasemap/MapServer',\n    attribution: \"&lt;a href='https://massgis.maps.arcgis.com/home/user.html?user=MassGIS'&gt;MassGIS, Mass. Executive Office of Technology Services and Security&lt;/a&gt;\",\n    ext: 'png',\n    minZoom: 7, \n    maxZoom: 19\n  });\n  \n  const USGS_Img = L.tileLayer(\n  'https://basemap.nationalmap.gov/arcgis/rest/services/USGSImageryTopo/MapServer/tile/{z}/{y}/{x}', \n  {\n    attribution: usgs,\n    ext: 'png',\n    minZoom: 0,\n    maxZoom: 16\n  });\n  \n  const USGS_Topo = L.tileLayer(\n  'https://basemap.nationalmap.gov/arcgis/rest/services/USGSTopo/MapServer/tile/{z}/{y}/{x}', \n  {\n    attribution: usgs,\n    ext: 'png',\n    minZoom: 0,\n    maxZoom: 16\n  }).addTo(map);\n\n  // button to toggle basemap layer selection\n  L.control.layers(\n    {\n      \"USGS Topo\": USGS_Topo,\n      \"USGS Imagery Topo\": USGS_Img,\n      \"MassGIS\": MassGIS_Basemap\n    },\n    null,\n    {position: 'topleft'}\n  ).addTo(map);\n  \n  L.control.scale().addTo(map);\n  \n  map.setView([39.0, -77.0], 6);\n\n  return map; \n\n};\n\n\n\n\n\n\n\nstyles = ({\n  basic: {\n    weight: 0.8,\n    fillColor: \"#696969\",\n    fillOpacity: 0.4,\n    color: \"#5e5e5e\",\n    opacity: 0.6\n  },\n  highlight: {\n    weight: 1.2,\n    fillColor: \"#35e6ab\",\n    fillOpacity: 0.6,\n    color: \"#5e5e5e\",\n    opacity: 0.8\n  },\n  select: {\n    weight: 1.0,\n    fillColor: \"#e69035\",\n    fillOpacity: 0.4,\n    color: \"#5e5e5e\",\n    opacity: 0.6\n  }\n});\n\n\n\n\n\n\n\n// main variable for tracking public land selection\nmutable results = [];\n\n\n\n\n\n\n\ngeojson = {\n\n  // indexOf returns index number if e exists, -1 otherwise\n  const idx = (e) =&gt; { return results.indexOf(e.feature.properties.Unit_Nm); };\n  \n  const highlightFeature = (e) =&gt; {\n\n    e.target.setStyle(styles.highlight); \n    e.target.bringToFront();\n    e.target.openPopup();\n  \n  };\n  \n  const resetHighlight = (e) =&gt; { \n\n    let q = (idx(e.target) &lt; 0) ? styles.basic : styles.select;\n    \n    e.target.setStyle(q);\n    e.target.closePopup();\n  \n  };\n  \n  const toggleFeature = (e) =&gt; {\n\n    const i = idx(e.target);\n    \n    if (i &gt; -1) {\n            \n      e.target.setStyle(styles.basic);\n      results.splice(i, 1);\n      \n    } else {\n              \n      e.target.setStyle(styles.select);\n      results.push(e.target.feature.properties.Unit_Nm);\n\n    };\n          \n  };\n  \n  const pop = (e) =&gt; {\n  \n    const txt = `\n      &lt;div class=\"popup\"&gt;\n        &lt;h4&gt; Public Land &lt;/h4&gt;\n        &lt;ul&gt;\n          &lt;li&gt; &lt;b&gt;Name:&lt;/b&gt; ${e.properties.Unit_Nm} &lt;/li&gt;\n          &lt;li&gt; &lt;b&gt;Type:&lt;/b&gt; ${e.properties.Own_Type} &lt;/li&gt;\n          &lt;li&gt; &lt;b&gt;Agency:&lt;/b&gt; ${e.properties.Own_Name} &lt;/li&gt;\n          &lt;li&gt; &lt;b&gt;State:&lt;/b&gt; ${e.properties.State_Nm} &lt;/li&gt;\n          &lt;li&gt; &lt;b&gt;Size (acres):&lt;/b&gt; ${e.properties.GIS_Acres} &lt;/li&gt;\n        &lt;/ul&gt;\n      &lt;/div&gt;\n    `;\n    \n    return txt;\n    \n  };\n\n  const onEachFeature = (feature, layer) =&gt; {\n    \n    layer.bindTooltip(pop(feature), {offset: L.point(30, 0)});\n    \n    layer.on({\n      mouseover: highlightFeature,\n      mouseout: resetHighlight,\n      click: toggleFeature\n    });\n    \n  }\n\n  let layer = L.geoJSON(fed_public_lands, { \n    style: styles.basic, \n    onEachFeature: onEachFeature\n  }).addTo(public_lands);\n  \n  return layer;\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\nmutable trigger = [0];\n\n\n\n\n\n\n\ngeojson.on(\"click\", (e) =&gt; { mutable trigger += 1; });\n\n\n\n\n\n\n\n// Add public land name to results-container in side panel\ndisplayResults = {\n\n  trigger;\n\n  let txt = \"\";\n  \n  if (results.length &gt; 0) { results.map(e =&gt; txt = txt + e + \"&lt;br&gt;\") };\n  \n  d3.select(\".results\")\n    .selectAll(\"p\")\n    .filter((d,i) =&gt; { return i == 0 })\n    .html(txt);\n\n};\n\n\n\n\n\n\n\n// Add sightings to eBird-container in side panel\ndisplayeBird = {\n\n  // let d = updateLand[0];\n  let txt = \"\";\n\n  if (runAPI == null) {\n    txt = txt + \"\";\n  } else if (runAPI.length == 0) {\n    txt = txt + \"No recent sightings &lt;br&gt; To update, click Run again\";\n  } else if (runAPI.length &gt; 0) { \n    runAPI.map(e =&gt; txt = txt + e.comName + \": \" + e.howMany + \"&lt;br&gt;\");\n    const names = [...new Set(runAPI.map(e =&gt; (e.locName)))];\n    console.log(names);\n  };\n  // console.log(txt);\n  \n  d3.select(\".eBird\")\n    .selectAll(\"p\")\n    .filter((d,i) =&gt; { return i == 0 })\n    .html(txt);\n\n};\n\n\n\n\n\n\n\ngeojson.eachLayer(e =&gt; {\n      \n  let p = e.feature.properties;\n  let d = updateLand[0];\n  let b = updateLand[1];\n  let i = results.indexOf(p.Unit_Nm);\n  \n  if (p.Unit_Nm == b) {\n  \n    if (d == \"add\") {\n    \n      if (i &lt; 0) {\n  \n        e.setStyle(styles.select);\n        results.push(p.Unit_Nm);\n        mutable trigger += 1;\n        public_lands.fitBounds(e.getBounds());\n\n      };\n  \n    } else { \n\n      if (i &gt; -1) {\n      \n        e.setStyle(styles.basic);\n        results.splice(i, 1);\n        mutable trigger -= 1;\n      \n      };\n  \n    };\n  \n  } else { };\n\n});\n\n\n\n\n\n\nThe boundaries for public lands are approximate and were obtained from the PAD-US database or elsewhere. Public land, here, refers to land that is accessible to the public and not necessarily public property."
  }
]